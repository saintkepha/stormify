// Generated by CoffeeScript 1.8.0
(function() {
  var BelongsToProperty, HasManyProperty, ModelRegistry, ModelRegistryProperty, RelationshipProperty, StormModel, StormObject, StormRegistry, assert,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  StormObject = require('./storm-object');

  assert = require('assert');

  RelationshipProperty = (function(_super) {
    __extends(RelationshipProperty, _super);

    RelationshipProperty.set({
      storm: 'relation'
    });

    RelationshipProperty.prototype.kind = null;

    function RelationshipProperty(model, opts, obj) {
      var type, _ref;
      this.model = model;
      if (opts == null) {
        opts = {};
      }
      assert(typeof ((_ref = this.model) != null ? _ref.constructor : void 0) === 'function', "cannot register a new relationship without proper model class");
      assert(obj instanceof StormModel, "cannot register a new relationship without containing obj defined");
      type = (function() {
        switch (this.kind) {
          case 'belongsTo':
            return 'string';
          case 'hasMany':
            return 'array';
        }
      }).call(this);
      if (this.kind === 'hasMany') {
        opts.unique = true;
      }
      RelationshipProperty.__super__.constructor.call(this, type, opts, obj);
    }

    return RelationshipProperty;

  })(StormObject.Property);

  BelongsToProperty = (function(_super) {
    __extends(BelongsToProperty, _super);

    function BelongsToProperty() {
      return BelongsToProperty.__super__.constructor.apply(this, arguments);
    }

    BelongsToProperty.set({
      storm: 'belongsTo'
    });

    BelongsToProperty.prototype.kind = 'belongsTo';

    BelongsToProperty.prototype.get = function() {
      return this.model.prototype.fetch(BelongsToProperty.__super__.get.apply(this, arguments));
    };

    BelongsToProperty.prototype.validate = function(value) {
      if (value == null) {
        value = this.value;
      }
      return (BelongsToProperty.__super__.validate.call(this, value)) === true && ((value == null) || this.model.prototype.fetch(value instanceof this.model));
    };

    BelongsToProperty.prototype.normalize = function(value) {
      var record;
      switch (false) {
        case !(value == null):
          return void 0;
        case !(value instanceof this.model):
          return value.get('id');
        case typeof value !== 'string':
          return value;
        case typeof value !== 'number':
          return "" + value;
        case !(value instanceof Array):
          return void 0;
        case !(value instanceof Object):
          record = new this.model(value);
          this.obj.bind(record);
          return this.normalize(record);
        default:
          return void 0;
      }
    };

    BelongsToProperty.prototype.serialize = function(format) {
      if (format == null) {
        format = 'json';
      }
      if (this.opts.embedded === true) {
        return this.get().serialize(format);
      } else {
        return BelongsToProperty.__super__.serialize.apply(this, arguments);
      }
    };

    return BelongsToProperty;

  })(RelationshipProperty);

  HasManyProperty = (function(_super) {
    __extends(HasManyProperty, _super);

    function HasManyProperty() {
      return HasManyProperty.__super__.constructor.apply(this, arguments);
    }

    HasManyProperty.set({
      storm: 'hasMany'
    });

    HasManyProperty.prototype.kind = 'hasMany';

    HasManyProperty.prototype.get = function() {
      return (HasManyProperty.__super__.get.apply(this, arguments).map((function(_this) {
        return function(e) {
          return _this.model.prototype.fetch(e);
        };
      })(this))).filter(function(e) {
        return e != null;
      });
    };

    HasManyProperty.prototype.push = function(value) {
      var list;
      list = this.get();
      list.push(value);
      return this.set(list);
    };

    HasManyProperty.prototype.validate = function(value) {
      if (value == null) {
        value = this.value;
      }
      return (HasManyProperty.__super__.validate.call(this, value)) === true && value.every((function(_this) {
        return function(e) {
          return (_this.model.prototype.fetch(e)) instanceof _this.model;
        };
      })(this));
    };

    HasManyProperty.prototype.normalize = function(value) {
      value = HasManyProperty.__super__.normalize.call(this, value);
      return HasManyProperty.__super__.normalize.call(this, (function() {
        switch (false) {
          case !(value instanceof Array):
            return (value.filter(function(e) {
              return e != null;
            })).map((function(_this) {
              return function(e) {
                return BelongsToProperty.prototype.normalize.call(_this, e);
              };
            })(this));
          default:
            return void 0;
        }
      }).call(this));
    };

    HasManyProperty.prototype.serialize = function(format) {
      if (format == null) {
        format = 'json';
      }
      if (this.opts.embedded === true) {
        return this.get().map(function(e) {
          return e.serialize(format);
        });
      } else {
        return HasManyProperty.__super__.serialize.apply(this, arguments);
      }
    };

    return HasManyProperty;

  })(RelationshipProperty);

  StormRegistry = require('./storm-registry');

  ModelRegistryProperty = (function(_super) {
    __extends(ModelRegistryProperty, _super);

    function ModelRegistryProperty(model, opts, obj) {
      this.model = model;
      ModelRegistryProperty.__super__.constructor.call(this, 'object', opts, obj);
    }

    ModelRegistryProperty.prototype.match = function(query, keys) {
      var k, v, _ref, _results;
      if (keys == null) {
        keys = false;
      }
      switch (false) {
        case !(query instanceof Array):
          return ModelRegistryProperty.__super__.match.apply(this, arguments);
        case !(query instanceof Object):
          _ref = this.get();
          _results = [];
          for (k in _ref) {
            v = _ref[k];
            if (v.match(query)) {
              if (keys) {
                _results.push(k);
              } else {
                _results.push(v);
              }
            }
          }
          return _results;
          break;
        default:
          return ModelRegistryProperty.__super__.match.apply(this, arguments);
      }
    };

    ModelRegistryProperty.prototype.serialize = function(format) {
      if (format == null) {
        format = 'json';
      }
      return {
        ids: Object.keys(this.value),
        numRecords: Object.keys(this.value).length
      };
    };

    return ModelRegistryProperty;

  })(StormRegistry.Property);

  ModelRegistry = (function(_super) {
    __extends(ModelRegistry, _super);

    function ModelRegistry() {
      return ModelRegistry.__super__.constructor.apply(this, arguments);
    }

    ModelRegistry.Property = ModelRegistryProperty;

    ModelRegistry.prototype.register = function(model, opts) {
      return ModelRegistry.__super__.register.call(this, model.meta.name, new ModelRegistryProperty(model, opts, this));
    };

    ModelRegistry.prototype.add = function() {
      var obj, record, records, _i, _len;
      records = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      obj = {};
      for (_i = 0, _len = records.length; _i < _len; _i++) {
        record = records[_i];
        if (record instanceof StormModel) {
          obj[record.get('id')] = record;
        }
      }
      return ModelRegistry.__super__.add.call(this, record.constructor.meta.name, obj);
    };

    ModelRegistry.prototype.remove = function() {
      var query, record, records;
      records = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      query = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = records.length; _i < _len; _i++) {
          record = records[_i];
          if (record instanceof StormModel) {
            _results.push(record.get('id'));
          }
        }
        return _results;
      })();
      return ModelRegistry.__super__.remove.call(this, record.constructor.meta.name, query);
    };

    ModelRegistry.prototype.contains = function(key) {
      return this.getProperty(key);
    };

    return ModelRegistry;

  })(StormRegistry);

  StormModel = (function(_super) {
    var Promise;

    __extends(StormModel, _super);

    StormModel.set({
      storm: 'model'
    });

    StormModel.belongsTo = function(model, opts) {
      return (function(_super1) {
        __extends(_Class, _super1);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.set({
          type: model,
          opts: opts
        });

        return _Class;

      })(BelongsToProperty);
    };

    StormModel.hasMany = function(model, opts) {
      return (function(_super1) {
        __extends(_Class, _super1);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.set({
          type: model,
          opts: opts
        });

        return _Class;

      })(HasManyProperty);
    };

    StormModel.action = function(func, opts) {
      return (function(_super1) {
        __extends(_Class, _super1);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.set({
          type: func,
          opts: opts
        });

        return _Class;

      })(ActionProperty);
    };

    StormModel.RelationshipProperty = RelationshipProperty;

    StormModel.HasManyProperty = HasManyProperty;

    StormModel.BelongsToProperty = BelongsToProperty;

    StormModel.Registry = ModelRegistry;

    StormModel.prototype.id = StormModel.attr('string', {
      "private": true,
      defaultValue: function() {
        return (require('node-uuid')).v4();
      }
    });

    StormModel.prototype.createdOn = StormModel.attr('date', {
      "private": true,
      defaultValue: function() {
        return new Date;
      }
    });

    StormModel.prototype.modifiedOn = StormModel.attr('date', {
      "private": true,
      defaultValue: function() {
        return new Date;
      }
    });

    StormModel.prototype.accessedOn = StormModel.attr('date', {
      "private": true,
      defaultValue: function() {
        return new Date;
      }
    });

    StormModel.prototype._bindings = StormModel.hasMany(StormModel, {
      "private": true
    });

    StormModel.prototype._models = new ModelRegistry;

    function StormModel(data) {
      StormModel.__super__.constructor.call(this, data);
      this._models.register(this.constructor);
      this._models.add(this);
    }

    StormModel.prototype.get = function() {
      this.set('accessedOn', new Date);
      return StormModel.__super__.get.apply(this, arguments);
    };

    StormModel.prototype.fetch = function(id) {
      return this._models.find(this.constructor.meta.name, id);
    };

    StormModel.prototype.getRelationships = function(kind) {
      return this.everyProperty(function(key) {
        if (this instanceof RelationshipProperty) {
          return this;
        }
      }).filter(function(x) {
        return (x != null) && ((kind == null) || kind === x.kind);
      });
    };


    /**
     * `bind` subjugates passed in records to be bound to the lifespan of
     * the current model record.
     *
     * When this current model record is destroyed, all bound dependents
     * will also be destroyed.
     */

    StormModel.prototype.bind = function() {
      var record, records, _i, _len, _results;
      records = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = records.length; _i < _len; _i++) {
        record = records[_i];
        if (!((record != null) && record instanceof StormModel)) {
          continue;
        }
        _results.push((this.getProperty('_bindings')).push(record.save()));
      }
      return _results;
    };

    StormModel.prototype.match = function(query) {
      var k, v, x, _ref;
      for (k in query) {
        v = query[k];
        x = (_ref = this.getProperty(k)) != null ? _ref.normalize(this.get(k)) : void 0;
        if (typeof x === 'boolean' && typeof v === 'string') {
          x = "" + x;
        }
        if (x !== v) {
          return false;
        }
      }
      return true;
    };

    StormModel.prototype.save = function() {
      var isValid;
      isValid = this.validate();
      if (isValid.length === 0) {
        if (this.isDirty()) {
          this.set('modifiedOn', new Date);
        }
        this.clearDirty();
        this._models.add(this);
        return this;
      } else {
        return null;
      }
    };

    StormModel.prototype.destroy = function() {
      var record, _i, _len, _ref;
      _ref = this.get('_bindings');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        record = _ref[_i];
        record.destroy();
      }
      return this._models.remove(this);
    };

    Promise = require('promise');

    StormModel.prototype.invoke = function() {
      var action, args, name, _ref;
      action = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      name = (_ref = this.getProperty(action)) != null ? _ref.constructor.get('name') : void 0;
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var err, _ref1;
          try {
            return resolve((_ref1 = _this[name]) != null ? _ref1.apply(_this, args) : void 0);
          } catch (_error) {
            err = _error;
            return reject(err);
          }
        };
      })(this));
    };

    return StormModel;

  })(StormObject);

  module.exports = StormModel;

}).call(this);
