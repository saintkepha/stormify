// Generated by CoffeeScript 1.8.0
(function() {
  var StormModel, YangModule, map,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  StormModel = require('../storm/storm-model');

  map = require('./yang-generator-map');

  YangModule = (function(_super) {
    __extends(YangModule, _super);

    function YangModule() {
      return YangModule.__super__.constructor.apply(this, arguments);
    }

    YangModule.set({
      storm: 'module'
    });

    YangModule.toYANG = function() {
      var convert;
      convert = function(json, offset) {
        var k, res, v;
        if (offset == null) {
          offset = 0;
        }
        if (!(json instanceof Object)) {
          return json;
        }
        res = '';
        for (k in json) {
          v = json[k];
          if (!(map.hasOwnProperty((k.split(':'))[0]))) {
            continue;
          }
          res += (Array(offset).join(' ')) + k.replace(':', ' ') + ' ';
          if (!(v instanceof Object)) {
            res += (function() {
              switch (k) {
                case 'contact':
                case 'description':
                case 'reference':
                case 'organization':
                  v = '\n"' + v;
                  v = v.replace(/\n/g, '\n' + Array(offset + 2).join(' '));
                  return v + '";\n\n';
                case 'namespace':
                case 'prefix':
                  return '"' + v + '";\n';
                default:
                  return v + ';\n';
              }
            })();
          } else {
            res += "{\n";
            res += convert(v, offset + 2);
            res += (Array(offset).join(' ')) + "}\n\n";
          }
        }
        return res;
      };
      return convert(this.toJSON(true));
    };

    YangModule.prototype.serialize = function(format) {
      var o, prefix;
      if (format == null) {
        format = 'json';
      }
      o = {};
      prefix = this.constructor.get('name');
      this.everyProperty(function(key) {
        var value;
        value = this.serialize();
        if (value == null) {
          return;
        }
        if (value instanceof Object && Object.keys(value).length === 0) {
          return;
        }
        return o[prefix + ':' + key] = value;
      });
      return o;
    };

    return YangModule;

  })(StormModel);

  module.exports = YangModule;

}).call(this);
