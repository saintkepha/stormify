// Generated by CoffeeScript 1.8.0
(function() {
  var BelongsToProperty, DataStormModel, DataStormObject, HasManyProperty, RelationshipProperty, assert,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  DataStormObject = require('./data-storm-object');

  assert = require('assert');

  RelationshipProperty = (function(_super) {
    __extends(RelationshipProperty, _super);

    RelationshipProperty.prototype.kind = null;

    function RelationshipProperty(model, opts, obj) {
      var type;
      this.model = model;
      if (opts == null) {
        opts = {};
      }
      assert(typeof (model != null ? model.constructor : void 0) === 'function', "cannot register a new relationship without proper model class");
      assert(obj instanceof DataStormModel, "cannot register a new relationship without containing obj defined");
      type = (function() {
        switch (this.kind) {
          case 'belongsTo':
            return 'string';
          case 'hasMany':
            return 'array';
        }
      }).call(this);
      if (this.kind === 'hasMany') {
        opts.unique = true;
      }
      RelationshipProperty.__super__.constructor.call(this, type, opts, obj);
    }

    RelationshipProperty.prototype.serialize = function() {
      return RelationshipProperty.__super__.serialize.call(this, this.get());
    };

    return RelationshipProperty;

  })(DataStormObject.Property);

  BelongsToProperty = (function(_super) {
    __extends(BelongsToProperty, _super);

    function BelongsToProperty() {
      return BelongsToProperty.__super__.constructor.apply(this, arguments);
    }

    BelongsToProperty.prototype.kind = 'belongsTo';

    BelongsToProperty.prototype.get = function() {
      return this.model.prototype.fetch(BelongsToProperty.__super__.get.apply(this, arguments));
    };

    BelongsToProperty.prototype.validate = function(value) {
      if (value == null) {
        value = this.value;
      }
      return (BelongsToProperty.__super__.validate.call(this, value)) === true && ((value == null) || this.model.prototype.fetch(value instanceof this.model));
    };

    BelongsToProperty.prototype.normalize = function(value) {
      var record;
      return BelongsToProperty.__super__.normalize.call(this, (function() {
        switch (false) {
          case !(value == null):
            return void 0;
          case !(value instanceof this.model):
            return value.get('id');
          case typeof value !== 'string':
            return value;
          case typeof value !== 'number':
            return "" + value;
          case !(value instanceof Array):
            return void 0;
          case !(value instanceof Object):
            record = new this.model(value);
            this.obj.bind(record);
            return this.normalize(record);
          default:
            return void 0;
        }
      }).call(this));
    };

    BelongsToProperty.prototype.serialize = function() {
      if (this.opts.embedded === true) {
        return this.get().serialize();
      } else {
        return BelongsToProperty.__super__.serialize.apply(this, arguments);
      }
    };

    return BelongsToProperty;

  })(RelationshipProperty);

  HasManyProperty = (function(_super) {
    __extends(HasManyProperty, _super);

    function HasManyProperty() {
      return HasManyProperty.__super__.constructor.apply(this, arguments);
    }

    HasManyProperty.prototype.kind = 'hasMany';

    HasManyProperty.prototype.get = function() {
      return (HasManyProperty.__super__.get.apply(this, arguments).map((function(_this) {
        return function(e) {
          return _this.model.prototype.fetch(e);
        };
      })(this))).filter(function(e) {
        return e != null;
      });
    };

    HasManyProperty.prototype.push = function(value) {
      var list;
      list = this.get();
      list.push(value);
      return this.set(list);
    };

    HasManyProperty.prototype.validate = function(value) {
      if (value == null) {
        value = this.value;
      }
      return (HasManyProperty.__super__.validate.call(this, value)) === true && value.every((function(_this) {
        return function(e) {
          return (_this.model.prototype.fetch(e)) instanceof _this.model;
        };
      })(this));
    };

    HasManyProperty.prototype.normalize = function(value) {
      return HasManyProperty.__super__.normalize.call(this, (function() {
        switch (false) {
          case !(value instanceof Array):
            return (value.filter(function(e) {
              return e != null;
            })).map((function(_this) {
              return function(e) {
                return BelongsToProperty.prototype.normalize.call(_this, e);
              };
            })(this));
          default:
            return void 0;
        }
      }).call(this));
    };

    HasManyProperty.prototype.serialize = function() {
      if (this.opts.embedded === true) {
        return this.get().map(function(e) {
          return e.serialize();
        });
      } else {
        return HasManyProperty.__super__.serialize.apply(this, arguments);
      }
    };

    return HasManyProperty;

  })(RelationshipProperty);

  DataStormModel = (function(_super) {
    __extends(DataStormModel, _super);

    DataStormModel.belongsTo = function(model, opts) {
      return {
        stormify: function() {
          return new BelongsToProperty(model, opts, this);
        }
      };
    };

    DataStormModel.hasMany = function(model, opts) {
      return {
        stormify: function() {
          return new HasManyProperty(model, opts, this);
        }
      };
    };

    DataStormModel.action = function(func, opts) {
      return {
        stormify: function() {
          return new ActionProperty(func, opts, this);
        }
      };
    };

    DataStormModel.prototype.id = DataStormModel.attr('string', {
      defaultValue: function() {
        return (require('node-uuid')).v4();
      }
    });

    DataStormModel.prototype.createdOn = DataStormModel.attr('date', {
      defaultValue: function() {
        return new Date;
      }
    });

    DataStormModel.prototype.modifiedOn = DataStormModel.attr('date', {
      defaultValue: function() {
        return new Date;
      }
    });

    DataStormModel.prototype.accessedOn = DataStormModel.attr('date', {
      defaultValue: function() {
        return new Date;
      }
    });

    DataStormModel.prototype._bindings = DataStormModel.hasMany(DataStormModel);

    DataStormModel.prototype._models = {};

    function DataStormModel(data) {
      DataStormModel.__super__.constructor.call(this, data);
      this._id = this.get('id');
      this._name = this.constructor.name;
      if (!this._models.hasOwnProperty(this.constructor.name)) {
        this._models[this.constructor.name] = {
          model: this.constructor,
          records: {}
        };
      }
    }

    DataStormModel.prototype.get = function() {
      this.set('accessedOn', new Date);
      return DataStormModel.__super__.get.apply(this, arguments);
    };

    DataStormModel.prototype.fetch = function(id) {
      var _ref, _ref1;
      return (_ref = this._models[this.constructor.name]) != null ? (_ref1 = _ref.records) != null ? _ref1[id] : void 0 : void 0;
    };

    DataStormModel.prototype.modelFor = function(modelName) {
      return this._models[modelName];
    };

    DataStormModel.prototype.getRelationships = function(kind) {
      return this.everyProperty(function(key) {
        if (this instanceof RelationshipProperty) {
          return this;
        }
      }).filter(function(x) {
        return (x != null) && ((kind == null) || kind === x.kind);
      });
    };

    DataStormModel.prototype.bind = function() {
      var record, records, _i, _len, _results;
      records = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = records.length; _i < _len; _i++) {
        record = records[_i];
        if (!((record != null) && record instanceof DataStormModel)) {
          continue;
        }
        _results.push((this.getPropertyObject('_bindings')).push(record.save()));
      }
      return _results;
    };

    DataStormModel.prototype.match = function(query) {
      var k, v, x, _ref;
      for (k in query) {
        v = query[k];
        x = (_ref = this.getPropertyObject(k)) != null ? _ref.normalize(this.get(k)) : void 0;
        if (typeof x === 'boolean' && typeof v === 'string') {
          x = "" + x;
        }
        if (x !== v) {
          return false;
        }
      }
      return true;
    };

    DataStormModel.prototype.save = function() {
      var isValid;
      isValid = this.validate();
      if (isValid.length === 0) {
        if (this.isDirty()) {
          this.set('modifiedOn', new Date);
        }
        this.clearDirty();
        this._models[this.constructor.name].records[this._id] = this;
        return this;
      } else {
        return null;
      }
    };

    DataStormModel.prototype.destroy = function() {
      var record, _i, _len, _ref;
      _ref = this.get('_bindings');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        record = _ref[_i];
        record.destroy();
      }
      return delete this._models[this.constructor.name].records[this._id];
    };

    DataStormModel.Promise = require('promise');

    DataStormModel.prototype.invoke = function(action, params, data) {
      return new this.Promise((function(_this) {
        return function(resolve, reject) {
          var err, _ref;
          try {
            return resolve((_ref = _this._actions[action]) != null ? _ref.call(_this, params, data) : void 0);
          } catch (_error) {
            err = _error;
            return reject(err);
          }
        };
      })(this));
    };

    return DataStormModel;

  })(DataStormObject);

  module.exports = DataStormModel;

}).call(this);
