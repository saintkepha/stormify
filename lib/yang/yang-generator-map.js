// Generated by CoffeeScript 1.8.0

/**
 * `yang` lexical parsing map for dealing with keyword namespaces along
 * with cardinal relationship enforcements
 */

(function() {
  var yang;

  yang = {
    module: function() {
      return {
        anyxml: [yang.anyxml],
        augment: [yang.augment],
        choice: [yang.choice],
        contact: yang.contact,
        container: [yang.container],
        description: yang.description,
        deviation: [yang.deviation],
        extension: [yang.extension],
        feature: [yang.feature],
        grouping: [yang.grouping],
        identity: [yang.identity],
        "import": [yang["import"]],
        include: [yang.include],
        leaf: [yang.leaf],
        'leaf-list': [yang['leaf-list']],
        list: [yang.list],
        namespace: 'uri',
        notification: [yang.notification],
        organization: yang.organization,
        prefix: 'string',
        reference: yang.reference,
        revision: [yang.revision],
        rpc: [yang.rpc],
        typedef: [yang.typedef],
        uses: [yang.uses],
        'yang-version': yang['yang-version']
      };
    },
    anyxml: null,
    augment: null,
    choice: null,
    config: 'boolean',
    contact: 'string',
    container: function() {
      return {
        anyxml: [yang.anyxml],
        choice: [yang.choice],
        config: yang.config,
        container: [yang.container],
        description: yang.description,
        grouping: [yang.grouping],
        'if-feature': [yang['if-feature']],
        leaf: [yang.leaf],
        'leaf-list': [yang['leaf-list']],
        list: [yang.list],
        must: [yang.must],
        presence: 'string',
        reference: yang.reference,
        status: yang.status,
        typedef: [yang.typedef],
        uses: [yang.uses],
        when: yang.when
      };
    },
    description: 'string',
    deviation: null,
    extension: function() {
      return {
        argument: function() {
          return {
            'yin-element': 'boolean'
          };
        },
        description: yang.description,
        reference: yang.reference,
        status: yang.status
      };
    },
    feature: function() {
      return {
        description: yang.description,
        'if-feature': [yang['if-feature']],
        reference: yang.reference,
        status: yang.status
      };
    },
    grouping: function(key, subs) {
      return {
        anyxml: [yang.anyxml],
        choice: [yang.choice],
        container: [yang.container],
        description: yang.description,
        grouping: [yang.grouping],
        leaf: [yang.leaf],
        'leaf-list': [yang['leaf-list']],
        list: [yang.list],
        reference: yang.reference,
        status: yang.status,
        typedef: [yang.typedef],
        uses: [yang.uses]
      };
    },
    identity: function() {
      return {
        base: 'string',
        description: yang.description,
        reference: yang.reference,
        status: yang.status
      };
    },
    'if-feature': 'string',
    include: function(key, subs) {
      return {
        'revision-date': 'date'
      };
    },
    "import": function(key, subs) {
      return {
        prefix: 'string',
        'revision-date': 'date'
      };
    },
    leaf: function(key, subs) {
      return {
        config: yang.config,
        "default": 'string',
        description: yang.description,
        'if-feature': [yang['if-feature']],
        mandatory: 'boolean',
        must: [yang.must],
        reference: yang.reference,
        status: yang.status,
        type: yang.type,
        units: 'string',
        when: yang.when
      };
    },
    'leaf-list': function(key, subs) {
      return {
        config: yang.config,
        description: yang.description,
        'if-feature': [yang['if-feature']],
        'max-elements': 'number',
        'min-elements': 'number',
        must: [yang.must],
        'ordered-by': 'string',
        reference: yang.reference,
        status: yang.status,
        type: yang.type,
        units: 'string',
        when: yang.when
      };
    },
    list: function() {
      return {
        anyxml: [yang.anyxml],
        choice: [yang.choice],
        config: yang.config,
        container: [yang.container],
        description: yang.description,
        grouping: [yang.grouping],
        'if-feature': [yang['if-feature']],
        key: 'string',
        leaf: [yang.leaf],
        'leaf-list': [yang['leaf-list']],
        list: [yang.list],
        'max-elements': 'number',
        'min-elements': 'number',
        must: [yang.must],
        'ordered-by': 'string',
        reference: yang.reference,
        status: yang.status,
        typedef: [yang.typedef],
        unique: 'string',
        uses: [yang.uses],
        when: yang.when
      };
    },
    must: function() {
      return {
        description: yang.description,
        'error-app-tag': 'string',
        'error-message': 'string',
        reference: yang.reference
      };
    },
    notification: null,
    organization: 'string',
    reference: 'string',
    revision: function() {
      return {
        description: yang.description,
        reference: yang.reference
      };
    },
    rpc: function() {
      return {
        description: yang.description,
        grouping: [yang.grouping],
        'if-feature': [yang['if-feature']],
        input: function() {
          return {
            anyxml: [yang.anyxml],
            choice: [yang.choice],
            container: [yang.container],
            grouping: [yang.grouping],
            leaf: [yang.leaf],
            'leaf-list': [yang['leaf-list']],
            list: [yang.list],
            typedef: [yang.typedef],
            uses: [yang.uses]
          };
        },
        output: yang.rpc.input,
        reference: yang.reference,
        status: yang.status,
        typedef: [yang.typedef]
      };
    },
    status: 'string',
    submodule: function(key, subs) {
      return {
        anyxml: [yang.anyxml],
        augment: [yang.augment],
        'belongs-to': function() {
          return {
            prefix: 'string'
          };
        },
        choice: [yang.choice],
        contact: yang.contact,
        container: [yang.container],
        description: yang.description,
        deviation: [yang.deviation],
        extension: [yang.extension],
        feature: [yang.feature],
        grouping: [yang.grouping],
        identity: [yang.identity],
        "import": [yang["import"]],
        include: [yang.include],
        leaf: [yang.leaf],
        'leaf-list': [yang['leaf-list']],
        list: [yang.list],
        namespace: 'uri',
        notification: [yang.notification],
        organization: yang.organization,
        prefix: 'string',
        reference: yang.reference,
        revision: [yang.revision],
        rpc: [yang.rpc],
        typedef: [yang.typedef],
        uses: [yang.uses],
        'yang-version': yang['yang-version']
      };
    },
    type: function() {
      return {
        bit: [yang.bit],
        "enum": [yang["enum"]],
        length: 'number',
        path: 'string',
        pattern: ['string'],
        range: 'string',
        'require-instance': 'number',
        type: [yang.type]
      };
    },
    bit: function() {
      return {
        description: yang.description,
        reference: yang.reference,
        status: yang.status,
        position: 'number'
      };
    },
    "enum": function() {
      return {
        description: yang.description,
        reference: yang.reference,
        status: yang.status,
        value: 'number'
      };
    },
    typedef: function() {
      return {
        "default": 'string',
        description: yang.description,
        units: 'string',
        type: yang.type,
        reference: yang.reference
      };
    },
    uses: function() {
      return {
        augment: yang.augment,
        description: yang.description,
        'if-feature': [yang['if-feature']],
        refine: function() {
          return null;
        },
        reference: yang.reference,
        status: yang.status,
        when: yang.when
      };
    },
    when: 'xpath'
  };

  module.exports = yang;

}).call(this);
