// Generated by CoffeeScript 1.8.0
(function() {
  var EventEmitter, RegistryProperty, StormObject, StormRegistry,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  StormObject = require('./storm-object');


  /**
   * `RegistryProperty` is a hash map collection (holding value of type Object)
   */

  RegistryProperty = (function(_super) {
    __extends(RegistryProperty, _super);

    function RegistryProperty(type, opts, obj) {
      RegistryProperty.__super__.constructor.call(this, 'object', opts, obj);
      this.set({});
    }

    RegistryProperty.prototype.match = function(query, keys) {
      var hit, item, k, key, map, match, results, v, _results, _results1;
      if (keys == null) {
        keys = false;
      }
      map = this.get();
      switch (false) {
        case !(query instanceof Array):
          _results = [];
          for (k in map) {
            v = map[k];
            if (__indexOf.call(query, k) >= 0) {
              if (keys) {
                _results.push(k);
              } else {
                _results.push(v);
              }
            }
          }
          return _results;
          break;
        case !(query instanceof Object):
          if (!keys) {
            return ((function() {
              var _results1;
              _results1 = [];
              for (k in map) {
                v = map[k];
                _results1.push(v);
              }
              return _results1;
            })()).where(query);
          } else {
            results = [];
            hit = Object.keys(query).length;
            for (key in map) {
              item = map[key];
              match = 0;
              for (k in query) {
                v = query[k];
                if (item[k] === v) {
                  match += 1;
                }
              }
              if (match === hit) {
                results.push(key);
              }
            }
            return results;
          }
          break;
        case query == null:
          if (!keys) {
            return map[query];
          } else {
            if (map.hasOwnProperty(query)) {
              return query;
            } else {
              return null;
            }
          }
          break;
        case !keys:
          return Object.keys(map);
        default:
          _results1 = [];
          for (k in map) {
            v = map[k];
            _results1.push(v);
          }
          return _results1;
      }
    };

    RegistryProperty.prototype.merge = function(obj) {
      var k, v, _results;
      _results = [];
      for (k in obj) {
        v = obj[k];
        _results.push(this.value[k] = v);
      }
      return _results;
    };

    RegistryProperty.prototype.remove = function(query) {
      var key, keys, _i, _len, _results;
      keys = this.match(query, true);
      switch (false) {
        case !(keys instanceof Array):
          _results = [];
          for (_i = 0, _len = keys.length; _i < _len; _i++) {
            key = keys[_i];
            _results.push(delete this.value[key]);
          }
          return _results;
          break;
        case keys == null:
          return delete this.value[keys];
      }
    };

    return RegistryProperty;

  })(StormObject.Property);

  EventEmitter = require('events').EventEmitter;


  /**
   * StormRegistry
   *
   * map of key: RegistryProperty
   *
   * primary methods:
   *
   * register()
   * find()
   * update()
   * remove()
   */

  StormRegistry = (function(_super) {
    __extends(StormRegistry, _super);

    function StormRegistry() {
      return StormRegistry.__super__.constructor.apply(this, arguments);
    }

    StormRegistry.set({
      storm: 'registry'
    });

    StormRegistry.include(EventEmitter);

    StormRegistry.Property = RegistryProperty;

    StormRegistry.prototype.register = function(key, property) {
      return this.addProperty(key, property);
    };

    StormRegistry.prototype.keys = function() {
      return StormRegistry.__super__.keys.apply(this, arguments).filter((function(_this) {
        return function(key) {
          return (_this.getProperty(key)) instanceof RegistryProperty;
        };
      })(this));
    };

    StormRegistry.prototype.find = function(key, query) {
      var _ref;
      return (_ref = this.getProperty(key)) != null ? _ref.match(query) : void 0;
    };

    StormRegistry.prototype.add = function(key, value) {
      var _ref;
      return (_ref = this.getProperty(key)) != null ? _ref.merge(value) : void 0;
    };

    StormRegistry.prototype.remove = function(key, query) {
      var _ref;
      return (_ref = this.getProperty(key)) != null ? _ref.remove(query) : void 0;
    };

    return StormRegistry;

  })(StormObject);

  module.exports = StormRegistry;

}).call(this);
