// Generated by CoffeeScript 1.8.0
(function() {
  var DS, YangContainer, YangExtension, YangGrouping, YangList, YangListEntry, YangModel, YangProperty,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  DS = require('../data-storm');

  YangGrouping = (function(_super) {
    __extends(YangGrouping, _super);

    function YangGrouping() {
      return YangGrouping.__super__.constructor.apply(this, arguments);
    }

    return YangGrouping;

  })(DS.Object);

  YangContainer = (function(_super) {
    __extends(YangContainer, _super);

    function YangContainer() {
      return YangContainer.__super__.constructor.apply(this, arguments);
    }

    return YangContainer;

  })(DS.Object);

  YangExtension = (function(_super) {
    __extends(YangExtension, _super);

    function YangExtension() {
      return YangExtension.__super__.constructor.apply(this, arguments);
    }

    return YangExtension;

  })(DS.Object);

  YangProperty = (function(_super) {
    __extends(YangProperty, _super);

    function YangProperty() {
      return YangProperty.__super__.constructor.apply(this, arguments);
    }

    return YangProperty;

  })(DS.Property);

  YangListEntry = (function(_super) {
    __extends(YangListEntry, _super);

    function YangListEntry() {
      return YangListEntry.__super__.constructor.apply(this, arguments);
    }

    return YangListEntry;

  })(DS.Object);

  YangList = (function(_super) {
    __extends(YangList, _super);

    YangList.Entry = YangListEntry;

    function YangList(model, opts, obj) {
      this.model = model;
      YangList.__super__.constructor.call(this, 'array', opts, obj);
    }

    return YangList;

  })(YangProperty);

  YangModel = (function(_super) {
    __extends(YangModel, _super);

    function YangModel() {
      return YangModel.__super__.constructor.apply(this, arguments);
    }

    YangModel.meta = {
      name: 'yang:model'
    };

    YangModel.Grouping = YangGrouping;

    YangModel.Container = YangContainer;

    YangModel.List = YangList;

    YangModel.Extension = YangExtension;

    YangModel.Property = YangProperty;

    YangModel.prototype.serialize = function(format) {
      var k, prop, v, value;
      if (format == null) {
        format = 'json';
      }
      value = YangModel.__super__.serialize.call(this, 'json');
      for (k in value) {
        v = value[k];
        prop = this.getProperty(k);
        if (prop.opts["private"] === true) {
          delete value[k];
        }
      }
      return value;
    };

    return YangModel;

  })(DS.Model);

  module.exports = YangModel;

}).call(this);
